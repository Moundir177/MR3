name: Deploy to Cloudflare Pages

on:
  push:
    branches: [master]
  workflow_dispatch:  # Allow manual triggering

# Add permissions for deployments
permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Set timeout to avoid hung builds
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Create GitHub deployment
      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          description: "Deploy to Cloudflare Pages"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Next.js application
        run: npm run build
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          NEXT_TELEMETRY_DISABLED: 1
          
      - name: Verify build output
        run: |
          echo "Checking build output structure..."
          ls -la .next || echo ".next directory not found"
          ls -la .next/standalone || echo ".next/standalone directory not found"
          
      - name: Prepare standalone for deployment
        run: |
          echo "Preparing standalone directory for deployment..."
          # Ensure public and static directories are copied
          if [ -d "public" ]; then
            cp -r public .next/standalone/ || echo "No public directory to copy"
          fi
          mkdir -p .next/standalone/.next/static
          cp -r .next/static/* .next/standalone/.next/static/ || echo "No static files to copy"
          
      - name: Deploy to Cloudflare Pages
        id: cloudflare-deploy
        run: |
          # Install wrangler globally
          npm install -g wrangler@latest
          # Deploy to Cloudflare Pages and capture output
          DEPLOYMENT_OUTPUT=$(wrangler pages deploy .next/standalone --project-name=mracad --branch=master --commit-dirty=true)
          echo "$DEPLOYMENT_OUTPUT"
          
          # Extract the deployment URL using grep and sed
          PREVIEW_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -o 'https://[a-zA-Z0-9.-]*.mracad.pages.dev' | head -1)
          if [ -z "$PREVIEW_URL" ]; then
            PREVIEW_URL="https://mracad.pages.dev"  # Default URL if not found
          fi
          
          # Set output variables for use in later steps
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      # Update GitHub deployment status
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "success"
          environment-url: ${{ steps.cloudflare-deploy.outputs.preview_url }}
          
      - name: Purge Cloudflare Cache
        if: success()
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' 